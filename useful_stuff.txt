$ cargo new hello_cargo --bin

$ cargo build

	(Cargo.lock to keep track of dependencies in your application)

$ cargo run 
	(Cargo will put it in the target/debug directory)

cargo build --release
	(create an executable in target/release instead of target/debug)

In fact, you can get started with virtually all Rust projects you want to work on with the following commands:
	$ git clone someurl.com/someproject
	$ cd someproject
	$ cargo build

$ cargo update
	When you do want to update a crate

$ cargo doc --open 
	command that will build documentation
--------------------------------------------------------------------------------------

	:: 	|	static method
	{} 	|	is a placeholder that holds a value in place

--------------------------------------------------------------------------------------

- A scalar type represents a single value.

- Note that all number literals except the byte literal allow a type suffix, such as 57u8, and _ as a visual separator, such as 1_000.

- Statements are instructions that perform some action and do not return a value. 
	fn main() {
	    let y = 6; // <-- Statement, so is the main itself
	}			// In C, you can write x = y = 6 and have both x and y have the value 6; that is not the case in Rust.

- Expressions evaluate to a resulting value. 
	fn main() {
	    let x = 5;

	    let y = {				// <-- Example Expression
		let x = 3;
		x + 1				// !!! HAS NO SEMICOLON, with semicolon it would be a statement without return
	    };

	    println!("The value of y is: {}", y);
	}

- We create slices with a rang of [starting_index..ending_index], but the slice data structure actually stores the starting position and the length of the 	slice.
	let s = String::from("hello world");
	let hello = &s[0..5]; // [..5] or [3..] or [..]

- Lifetimes ensure that the data a struct references is valid for as long as the struct is.

- Putting the specifier :? inside the {} tells println! we want to use an output format called Debug

- Having a method that takes ownership of the instance by having just self as the first parameter is rarer; this is usually used when the method transforms self into something else and we want to prevent the caller from using the original instance after the transformation.

- Rust doesn’t have the null feature that many other languages have.

- Match: Patterns can be made up of literal values, variable names, wildcards, and many other things

- By default, everything is set as private (including modules). You can use the pub keyword to make a module public.

- The use keyword allows you to bring modules, or the definitions inside modules, into scope so that it’s easier to refer to them.

- Note: Traits are similar to a feature often called 'interfaces' in other languages, though with some differences.
--------------------------------------------------------------------------------------

const Y: u32 = 12;

fn main() {
    let mut x = 5;
    println!("The value of x is: {}", x);

    // shadowing
    let x = 6;
    println!("The value of x is: {}", x);

    println!("The value of const y is: {}:", y);

    //---------------------------------------------------- Compound Types
    // tuple: Elements can have different types.
    let tup: (i32, f64, u8) = (500, 6.4, 1);

    // getting out the values with a pattern
    let (x, y, z) = tup;
    println!("The value of y is: {}", y);
    
    let five_hundred = tup.0;

    let six_point_four = tup.1;

    let one = tup.2;

    // arrays: All elements must have the same type.
    let a = [1,2,3,4,5];
    let first = a[0];

    
}

-------------------------------------------------------------------------------------

Rules Ownership
        1. Each value in Rust has a variable that’s called its owner.
        2. There can only be one owner at a time.
        3. When the owner goes out of scope, the value will be dropped.


