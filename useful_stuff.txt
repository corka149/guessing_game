$ cargo new hello_cargo --bin

$ cargo build

	(Cargo.lock to keep track of dependencies in your application)

$ cargo run 
	(Cargo will put it in the target/debug directory)

cargo build --release
	(create an executable in target/release instead of target/debug)

In fact, you can get started with virtually all Rust projects you want to work on with the following commands:
	$ git clone someurl.com/someproject
	$ cd someproject
	$ cargo build

$ cargo update
	When you do want to update a crate

$ cargo doc --open 
	command that will build documentation
--------------------------------------------------------------------------------------

	:: 	|	static method
	{} 	|	is a placeholder that holds a value in place

--------------------------------------------------------------------------------------

- A scalar type represents a single value.

- Note that all number literals except the byte literal allow a type suffix, such as 57u8, and _ as a visual separator, such as 1_000.



--------------------------------------------------------------------------------------

const Y: u32 = 12;

fn main() {
    let mut x = 5;
    println!("The value of x is: {}", x);

    // shadowing
    let x = 6;
    println!("The value of x is: {}", x);

    println!("The value of const y is: {}:", y);

    //---------------------------------------------------- Compound Types
    // tuple: Elements can have different types.
    let tup: (i32, f64, u8) = (500, 6.4, 1);

    // getting out the values with a pattern
    let (x, y, z) = tup;
    println!("The value of y is: {}", y);
    
    let five_hundred = tup.0;

    let six_point_four = tup.1;

    let one = tup.2;

    // arrays: All elements must have the same type.
    let a = [1,2,3,4,5];
    let first = a[0];

    
}
